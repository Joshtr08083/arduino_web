/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/plant.gltf -t 

====== Sketchfab Mode =============================================================================

  author: assetfactory (https://sketchfab.com/assetfactory)
  license: Free Standard
  source: https://sketchfab.com/3d-models/house-palm-plant-346a62f326824803bec27dc53703396a
  title: House palm plant

===================================================================================================
*/

import * as THREE from 'three'
import { useGLTF } from '@react-three/drei'
import { type GLTF } from 'three-stdlib'
import { useEffect } from 'react'

type GLTFResult = GLTF & {
  nodes: {
    Leaf3: THREE.Mesh
    Leaf4: THREE.Mesh
    Leaf1: THREE.Mesh
    Pot_1: THREE.Mesh
    Pot_2: THREE.Mesh
    Leaf2: THREE.Mesh
  }
  materials: {
    leaf3: THREE.MeshStandardMaterial
    leaf4: THREE.MeshStandardMaterial
    leaf1: THREE.MeshStandardMaterial
    FlowerPot: THREE.MeshStandardMaterial
    Soil: THREE.MeshStandardMaterial
    leaf2: THREE.MeshStandardMaterial
  }

}

interface leafProps {
  Leaf1: number
  Leaf2: number
  Leaf3: number
  Leaf4: number
}


type LeafId = 'Leaf1' | 'Leaf2' | 'Leaf3' | 'Leaf4'
type MaterialKey = 'leaf1' | 'leaf2' | 'leaf3' | 'leaf4'

const leafToMaterialMap: Record<LeafId, MaterialKey> = {
  Leaf1: 'leaf1',
  Leaf2: 'leaf2',
  Leaf3: 'leaf3',
  Leaf4: 'leaf4'
}

const LOW_THRESHOLD = 20;

export function Plant( { leafStates } : { leafStates: leafProps}) {
  const { nodes, materials } = useGLTF('/plant.gltf') as unknown as GLTFResult

  useEffect(() => {
    for (const leaf in leafStates) {
      
      const level = leafStates[leaf as keyof leafProps] * 2000;
      // console.log((level));
      const mat = materials[leafToMaterialMap[leaf as LeafId]] as THREE.MeshStandardMaterial;

      const color = new THREE.Color().lerpColors(
        new THREE.Color('#4AC74C'),
        new THREE.Color('#99D9FF'), 
        (level < LOW_THRESHOLD? 0 : (level / 5))               
      )
      
      
      mat.color.copy(color);
    }
  }, [leafStates, materials]);

  return (
    <group dispose={null}>
      <mesh geometry={nodes.Leaf3.geometry} material={materials.leaf3} position={[0.095, 0.799, -0.127]} rotation={[0, -0.49, 0]} />
      <mesh geometry={nodes.Leaf2.geometry} material={materials.leaf2} position={[-0.094, 0.696, -0.127]} rotation={[0, 0.522, 0]} scale={0.774} />
      <mesh geometry={nodes.Leaf4.geometry} material={materials.leaf4} position={[0.077, 0.799, 0.069]} rotation={[Math.PI, -1.098, Math.PI]} />
      <mesh geometry={nodes.Leaf1.geometry} material={materials.leaf1} position={[0.057, 0.651, 0.029]} rotation={[-Math.PI, 1.198, -Math.PI]} />
      <group position={[-0.025, 0.226, 0]} scale={0.424}>
        <mesh geometry={nodes.Pot_1.geometry} material={materials.FlowerPot} />
        <mesh geometry={nodes.Pot_2.geometry} material={materials.Soil} />
      </group>
      
    </group>
  )
}

export default Plant;

useGLTF.preload('/plant.gltf')
